@{
    ViewData["Title"] = "Manager Data Areas";
}
<br />
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MANAGE SCENES</title>
    <link rel="stylesheet" type="text/css" href="~/css/Styles_options.css" />
    <base href="/">
    <style>
        button {
            cursor: pointer;
            transition: background-color 0.3s ease, color 0.3s ease, transform 0.3s ease;
            border: none;
            border-radius: 10px;
        }

            button:hover {
                background-color: #008CBA;
                color: white;
                transform: scale(1.1);
            }

        h1 {
            font-size: 27px;
            font-family: Arial;
            color: black;
        }

        #editTable {
            display: none;
        }</style>
</head>
<body>
    <h1>MANAGE Areas</h1>
    <form id="addDataForm">

        <label for="InputNameAreas">Name Areas</label>
        <input type="text" id="InputNameAreas" required>

        <label for="InputIDAreas">ID Areas</label>
        <input type="text" id="InputIDAreas" required>

        <button type="submit">Add New Areas</button><br><br>
    </form>


    <h1>LIST AREAS</h1>
    <table id="AreasTable">
        <thead>
            <tr>
                <th>Code Areas </th>
                <th>Name Areas</th>
                <th>ID Areas</th>
              
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <div id="editTable">
        <input type="text" id="editCodeAreas" placeholder="Code Areas">
        <input type="text" id="editNameAreas" placeholder="Name Areas">
        <input type="text" id="editIDAreas" placeholder="ID Areas">     
        
        <button id="saveChangesBtn">SAVE</button>
    </div>




    <script>
        const apiUrl = '/api/Areas/ListAras';
        let dataList;

        document.addEventListener('DOMContentLoaded', function () {
            getAreasAndDisplay();

            document.getElementById('addDataForm').addEventListener('submit', async function (e) {
                e.preventDefault();

                const url = window.location.origin + '/api/Areas/InsertAreas';

                
                const nameAreas = document.getElementById('InputNameAreas').value;
                const idAreas = document.getElementById('InputIDAreas').value;
              

                const dataToPost = {
                    NameAreas: nameAreas,
                    IDAreas: idAreas

                };

                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(dataToPost),
                    });

                    if (!response.ok) {
                        throw new Error(`ERROR WHEN INSERTING DATA! ${response.status} - ${response.statusText}`);
                    }

                    console.log('SUCCESS');
                    alert('ADD NEW SCENES SUCCESS!');
                    getScenesAndDisplay();

                    // Clear textbox values
                    document.getElementById('InputNameAreas').value = '';
                    document.getElementById('InputIDAreas').value = '';
                   
                } catch (error) {
                    console.error('ERROR WHEN INSERTING DATA!', error);
                }
            });

            async function getAreasAndDisplay() {
                try {
                    const response = await fetch(apiUrl);
                    if (!response.ok) {
                        throw new Error(`ERROR WHEN RETRIEVING DATA! ${response.status} - ${response.statusText}`);
                    }
                    const { data } = await response.json();
                    console.log(data);
                    dataList = data.map(item => ({
                        codeAreas: item.codeAreas,
                        nameAreas: item.nameAreas,
                        idAreas: item.idAreas
                    }));

                    displayAreas(dataList);
                    console.log(dataList);
                } catch (error) {
                    console.error('ERROR WHEN RETRIEVING DATA!', error);
                }
            }

            function displayAreas(dataList) {
                const tableBody = document.querySelector('#AreasTable tbody');
                tableBody.innerHTML = '';

                dataList.forEach(data => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${data.codeAreas}</td>
                        <td>${data.nameAreas}</td>
                        <td>${data.idAreas}</td>
                        
                        <td>
                            <button onclick="editScenes('${data.codeScenes}')">UPDATE</button>
                            <button onclick="confirmDelete('${data.codeScenes}')">DELETE</button>
                            <a href="/Locations/Create?areaCode=@area.CodeAreas">Add Location</a>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            }

            window.confirmDelete = function (codeScenes) {
                const shouldDelete = confirm('You want to delete this scenes?');
                if (shouldDelete) {
                    console.log('Code Delete:', codeScenes);
                    deleteScenes(codeScenes);
                }
            };

            async function deleteScenes(codeScenes) {
                console.log('code of deleteImage:', codeScenes);
                const deleteUrl = `/api/Scenes/DeleteScenes?codeScenes=${codeScenes}`;

                try {
                    const response = await fetch(deleteUrl, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    });

                    if (!response.ok) {
                        throw new Error(`ERROR DELETE: ${response.status} - ${response.statusText}`);
                    }

                    getScenesAndDisplay();
                } catch (error) {
                    console.error('SERVER IS NOT RESPONDING!', error);
                }
            }

            window.editScenes = function (codeScenes) {
                openEditModal(codeScenes);
            };

            function openEditModal(codeScenes) {
                const editModal = document.getElementById('editTable');
                if (editModal.style.display === 'none') {
                    editModal.style.display = 'table';
                } else {
                    editModal.style.display = 'none';
                }

                const dataEdit = dataList.find(item => item.codeScenes === codeScenes);
                document.getElementById('editCodeScenes').value = dataEdit.codeScenes;
                document.getElementById('editIDLocations').value = dataEdit.idLocations;
                document.getElementById('editIDScenes').value = dataEdit.idScenes;
                document.getElementById('editTitle').value = dataEdit.title;
                document.getElementById('editLink').value = dataEdit.urlScenes;
                document.getElementById('editPitch').value = dataEdit.pitch;
                document.getElementById('editYaw').value = dataEdit.yaw;
                console.log('data edit');
                console.log(dataEdit);
            }

            document.getElementById('saveChangesBtn').addEventListener('click', saveChanges);

            function saveChanges() {
                const editedCodeScenes = document.getElementById('editCodeScenes').value;
                const editedIDLocations = document.getElementById('editIDLocations').value;
                const editedIDScenes = document.getElementById('editIDScenes').value;
                const editedTitle = document.getElementById('editTitle').value;
                const editedLink = document.getElementById('editLink').value;
                const editedPitch = parseFloat(document.getElementById('editPitch').value);
                const editedYaw = parseFloat(document.getElementById('editYaw').value);
                console.log('data save');
                const updateUrl = `/api/Scenes/UpdateScenes`;

                const dataToUpdate = {
                    codeScenes: editedCodeScenes,
                    idLocations: editedIDLocations,
                    idScenes: editedIDScenes,
                    titleScenes: editedTitle,
                    urlScenes: editedLink,
                    pitchScenes: editedPitch,
                    yawScenes: editedYaw
                };
                console.log("data update");
                console.log(dataToUpdate);
                fetch(updateUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(dataToUpdate),
                })
                    .then(response => {
                        if (response.ok) {
                            console.log('SUCCESS');
                            alert('SUCCESS!');
                            closeEditModal();
                            getScenesAndDisplay();
                        } else {
                            console.error('FAIL');
                            alert('ERROR!');
                        }
                    })
                    .catch(error => {
                        console.error('SERVER IS NOT RESPONDING!', error);
                    });
            }

            function closeEditModal() {
                const editTable = document.getElementById('editTable');
                editTable.style.display = 'none';
            }
        });

    </script>

</body>
</html>

